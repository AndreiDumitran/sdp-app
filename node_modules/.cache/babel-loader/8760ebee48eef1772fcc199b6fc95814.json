{"ast":null,"code":"var _jsxFileName = \"/home/andrei/Desktop/SoftDevProj/Playground/src/components/map.js\";\nimport React, { Component } from \"react\";\nimport { GoogleMap, useLoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from \"use-places-autocomplete\";\nimport { Combobox, ComboboxInput, ComboboxPopover, ComboboxList, ComboboxOption } from \"@reach/combobox\";\nimport { formatRelative } from \"date-fns\";\nimport { center } from \"./getBrowserLocation\";\nimport \"@reach/combobox/styles.css\";\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  width: \"100vw\",\n  height: \"50vh\"\n};\nconst options = {\n  mapTypeControl: false,\n  fullscreenControl: false,\n  streetViewControl: false\n};\nconsole.log(center.lat);\nexport class Map extends Component {\n  render() {\n    return function App() {\n      const {\n        isLoaded,\n        loadError\n      } = useLoadScript({\n        googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n        libraries\n      });\n      const [markers, setMarkers] = React.useState([]);\n      const [selected, setSelected] = React.useState(null);\n      const onMapClick = React.useCallback(event => {\n        setMarkers(current => [...current, {\n          lat: event.latLng.lat(),\n          lng: event.latLng.lng(),\n          time: new Date()\n        }]);\n      }, []);\n      const mapRef = React.useRef();\n      const onMapLoad = React.useCallback(map => {\n        mapRef.current = map;\n      }, []);\n      const panTo = React.useCallback(({\n        lat,\n        lng\n      }) => {\n        mapRef.current.panTo({\n          lat,\n          lng\n        });\n        mapRef.current.setZoom(16);\n      }, []);\n      if (loadError) return \"Error loading maps\";\n      if (!isLoaded) return \"Loading Maps\";\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"centered\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Search, {\n        panTo: panTo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(Locate, {\n        panTo: panTo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(GoogleMap, {\n        mapContainerStyle: mapContainerStyle,\n        zoom: 15,\n        center: center,\n        options: options,\n        onClick: onMapClick,\n        onLoad: onMapLoad,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }\n      }, markers.map(marker => /*#__PURE__*/React.createElement(Marker, {\n        key: marker.time.toISOString(),\n        position: {\n          lat: marker.lat,\n          lng: marker.lng\n        },\n        onClick: () => {\n          setSelected(marker);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 15\n        }\n      })), selected ? /*#__PURE__*/React.createElement(InfoWindow, {\n        position: {\n          lat: selected.lat,\n          lng: selected.lng\n        },\n        onCloseClick: () => {\n          setSelected(null);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 19\n        }\n      }, \"Hello\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 19\n        }\n      }, \"Clicked \", formatRelative(selected.time, new Date())))) : null));\n    };\n  }\n\n}\n\nfunction Locate({\n  panTo\n}) {\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"locate\",\n    onClick: () => {\n      navigator.geolocation.getCurrentPosition(position => {\n        panTo({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n      }, () => null, options);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"compass.svg\",\n    alt: \"compass - locate me\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction Search({\n  panTo\n}) {\n  const {\n    ready,\n    value,\n    suggestions: {\n      status,\n      data\n    },\n    setValue,\n    clearSuggestions\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: {\n        lat: () => center.lat,\n        lng: () => center.lng\n      },\n      radius: 1 * 1000\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Combobox, {\n    onSelect: async address => {\n      setValue(address, false);\n      clearSuggestions();\n\n      try {\n        const results = await getGeocode({\n          address\n        });\n        const {\n          lat,\n          lng\n        } = await getLatLng(results[0]);\n        panTo({\n          lat,\n          lng\n        });\n      } catch (error) {\n        console.log(\"error!\");\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ComboboxInput, {\n    value: value,\n    onChange: e => {\n      setValue(e.target.value);\n    },\n    disable: !ready,\n    placeholder: \"Enter your Point of Interest\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ComboboxPopover, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ComboboxList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 11\n    }\n  }, status === \"OK\" && data.map(({\n    id,\n    description\n  }) => /*#__PURE__*/React.createElement(ComboboxOption, {\n    key: id,\n    value: description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 17\n    }\n  }))))));\n}","map":{"version":3,"sources":["/home/andrei/Desktop/SoftDevProj/Playground/src/components/map.js"],"names":["React","Component","GoogleMap","useLoadScript","Marker","InfoWindow","usePlacesAutocomplete","getGeocode","getLatLng","Combobox","ComboboxInput","ComboboxPopover","ComboboxList","ComboboxOption","formatRelative","center","libraries","mapContainerStyle","width","height","options","mapTypeControl","fullscreenControl","streetViewControl","console","log","lat","Map","render","App","isLoaded","loadError","googleMapsApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","markers","setMarkers","useState","selected","setSelected","onMapClick","useCallback","event","current","latLng","lng","time","Date","mapRef","useRef","onMapLoad","map","panTo","setZoom","marker","toISOString","Locate","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","Search","ready","value","suggestions","status","data","setValue","clearSuggestions","requestOptions","location","radius","address","results","error","e","target","id","description"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  GoogleMap,\n  useLoadScript,\n  Marker,\n  InfoWindow,\n} from \"@react-google-maps/api\";\nimport usePlacesAutocomplete, {\n  getGeocode,\n  getLatLng,\n} from \"use-places-autocomplete\";\nimport {\n  Combobox,\n  ComboboxInput,\n  ComboboxPopover,\n  ComboboxList,\n  ComboboxOption,\n} from \"@reach/combobox\";\nimport { formatRelative } from \"date-fns\";\nimport { center } from \"./getBrowserLocation\";\n\nimport \"@reach/combobox/styles.css\";\n\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  width: \"100vw\",\n  height: \"50vh\",\n};\n\nconst options = {\n  mapTypeControl: false,\n  fullscreenControl: false,\n  streetViewControl: false,\n};\n\nconsole.log(center.lat);\n\nexport class Map extends Component {\n  render() {\n    return function App() {\n      const { isLoaded, loadError } = useLoadScript({\n        googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n        libraries,\n      });\n\n      const [markers, setMarkers] = React.useState([]);\n      const [selected, setSelected] = React.useState(null);\n      const onMapClick = React.useCallback((event) => {\n        setMarkers((current) => [\n          ...current,\n          {\n            lat: event.latLng.lat(),\n            lng: event.latLng.lng(),\n            time: new Date(),\n          },\n        ]);\n      }, []);\n\n      const mapRef = React.useRef();\n      const onMapLoad = React.useCallback((map) => {\n        mapRef.current = map;\n      }, []);\n\n      const panTo = React.useCallback(({ lat, lng }) => {\n        mapRef.current.panTo({ lat, lng });\n        mapRef.current.setZoom(16);\n      }, []);\n      if (loadError) return \"Error loading maps\";\n      if (!isLoaded) return \"Loading Maps\";\n\n      return (\n        <div className=\"centered\">\n          <Search panTo={panTo} />\n          <Locate panTo={panTo} />\n          <GoogleMap\n            mapContainerStyle={mapContainerStyle}\n            zoom={15}\n            center={center}\n            options={options}\n            onClick={onMapClick}\n            onLoad={onMapLoad}\n          >\n            {markers.map((marker) => (\n              <Marker\n                key={marker.time.toISOString()}\n                position={{ lat: marker.lat, lng: marker.lng }}\n                onClick={() => {\n                  setSelected(marker);\n                }}\n              />\n            ))}\n\n            {selected ? (\n              <InfoWindow\n                position={{ lat: selected.lat, lng: selected.lng }}\n                onCloseClick={() => {\n                  setSelected(null);\n                }}\n              >\n                <div>\n                  <h1>Hello</h1>\n                  <p>Clicked {formatRelative(selected.time, new Date())}</p>\n                </div>\n              </InfoWindow>\n            ) : null}\n          </GoogleMap>\n        </div>\n      );\n    };\n  }\n}\n\nfunction Locate({ panTo }) {\n  return (\n    <button\n      className=\"locate\"\n      onClick={() => {\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            panTo({\n              lat: position.coords.latitude,\n              lng: position.coords.longitude,\n            });\n          },\n          () => null,\n          options\n        );\n      }}\n    >\n      <img src=\"compass.svg\" alt=\"compass - locate me\" />\n    </button>\n  );\n}\n\nfunction Search({ panTo }) {\n  const {\n    ready,\n    value,\n    suggestions: { status, data },\n    setValue,\n    clearSuggestions,\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: { lat: () => center.lat, lng: () => center.lng },\n      radius: 1 * 1000,\n    },\n  });\n\n  return (\n    <div className=\"search\">\n      <Combobox\n        onSelect={async (address) => {\n          setValue(address, false);\n          clearSuggestions();\n          try {\n            const results = await getGeocode({ address });\n            const { lat, lng } = await getLatLng(results[0]);\n            panTo({ lat, lng });\n          } catch (error) {\n            console.log(\"error!\");\n          }\n        }}\n      >\n        <ComboboxInput\n          value={value}\n          onChange={(e) => {\n            setValue(e.target.value);\n          }}\n          disable={!ready}\n          placeholder=\"Enter your Point of Interest\"\n        />\n        <ComboboxPopover>\n          <ComboboxList>\n            {status === \"OK\" &&\n              data.map(({ id, description }) => (\n                <ComboboxOption key={id} value={description} />\n              ))}\n          </ComboboxList>\n        </ComboboxPopover>\n      </Combobox>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}