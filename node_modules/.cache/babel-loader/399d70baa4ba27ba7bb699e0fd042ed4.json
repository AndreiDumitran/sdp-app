{"ast":null,"code":"var _jsxFileName = \"/home/andrei/Desktop/SoftDevProj/Playground/src/App.js\";\nimport React from \"react\";\nimport { GoogleMap, useLoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from \"use-places-autocomplete\";\nimport { Combobox, ComboboxInput, ComboboxPopover, ComboboxList, ComboboxOption } from \"@reach/combobox\";\nimport { formatRelative } from \"date-fns\";\nimport { center } from \"./components/getBrowserLocation\";\nimport \"@reach/combobox/styles.css\";\nimport { DisplayPlacesList, radius } from \"./components/displayPlaces\";\nimport { Button, Container } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  width: \"100vw\",\n  height: \"60vh\"\n};\nconst options = {\n  mapTypeControl: false,\n  fullscreenControl: false,\n  streetViewControl: false\n};\nconsole.log(center.lat);\n\nfunction App() {\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n    libraries\n  });\n  const [markers, setMarkers] = React.useState([]);\n  const [selected, setSelected] = React.useState(null);\n  const onMapClick = React.useCallback(event => {\n    setMarkers(current => [...current, {\n      lat: event.latLng.lat(),\n      lng: event.latLng.lng(),\n      time: new Date()\n    }]);\n  }, []);\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback(map => {\n    mapRef.current = map;\n  }, []);\n  const panTo = React.useCallback(({\n    lat,\n    lng\n  }) => {\n    mapRef.current.panTo({\n      lat,\n      lng\n    });\n    mapRef.current.setZoom(17);\n  }, []);\n  if (loadError) return \"Error loading maps\";\n  if (!isLoaded) return \"Loading Maps\";\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Search, {\n    panTo: panTo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Locate, {\n    panTo: panTo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(GoogleMap, {\n    mapContainerStyle: mapContainerStyle,\n    zoom: 15,\n    center: center,\n    options: options,\n    onClick: onMapClick,\n    onLoad: onMapLoad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, markers.map(marker => /*#__PURE__*/React.createElement(Marker, {\n    key: marker.time.toISOString(),\n    position: {\n      lat: marker.lat,\n      lng: marker.lng\n    },\n    onClick: () => {\n      setSelected(marker);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  })), selected ? /*#__PURE__*/React.createElement(InfoWindow, {\n    position: {\n      lat: selected.lat,\n      lng: selected.lng\n    },\n    onCloseClick: () => {\n      setSelected(null);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 15\n    }\n  }, \"Hello\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 15\n    }\n  }, \"Clicked \", formatRelative(selected.time, new Date())))) : null), /*#__PURE__*/React.createElement(Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }, \"Test Button\"), /*#__PURE__*/React.createElement(DisplayPlacesList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App;\n\nfunction Locate({\n  panTo\n}) {\n  return /*#__PURE__*/React.createElement(Button, {\n    className: \"locate\",\n    onClick: () => {\n      navigator.geolocation.getCurrentPosition(position => {\n        panTo({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n      }, () => null, options);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"compass.svg\",\n    alt: \"compass - locate me\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction Search({\n  panTo\n}) {\n  const {\n    ready,\n    value,\n    suggestions: {\n      status,\n      data\n    },\n    setValue,\n    clearSuggestions\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: {\n        lat: () => center.lat,\n        lng: () => center.lng\n      },\n      radius: radius\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Combobox, {\n    onSelect: async address => {\n      setValue(address, false);\n      clearSuggestions();\n\n      try {\n        const results = await getGeocode({\n          address\n        });\n        const {\n          lat,\n          lng\n        } = await getLatLng(results[0]);\n        panTo({\n          lat,\n          lng\n        });\n      } catch (error) {\n        console.log(\"error!\");\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ComboboxInput, {\n    value: value,\n    onChange: e => {\n      setValue(e.target.value);\n    },\n    disable: !ready,\n    placeholder: \"Enter your Point of Interest\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ComboboxPopover, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ComboboxList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 11\n    }\n  }, status === \"OK\" && data.map(({\n    id,\n    description\n  }) => /*#__PURE__*/React.createElement(ComboboxOption, {\n    key: id,\n    value: description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 17\n    }\n  }))))));\n}","map":{"version":3,"sources":["/home/andrei/Desktop/SoftDevProj/Playground/src/App.js"],"names":["React","GoogleMap","useLoadScript","Marker","InfoWindow","usePlacesAutocomplete","getGeocode","getLatLng","Combobox","ComboboxInput","ComboboxPopover","ComboboxList","ComboboxOption","formatRelative","center","DisplayPlacesList","radius","Button","Container","libraries","mapContainerStyle","width","height","options","mapTypeControl","fullscreenControl","streetViewControl","console","log","lat","App","isLoaded","loadError","googleMapsApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","markers","setMarkers","useState","selected","setSelected","onMapClick","useCallback","event","current","latLng","lng","time","Date","mapRef","useRef","onMapLoad","map","panTo","setZoom","marker","toISOString","Locate","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","Search","ready","value","suggestions","status","data","setValue","clearSuggestions","requestOptions","location","address","results","error","e","target","id","description"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  GoogleMap,\n  useLoadScript,\n  Marker,\n  InfoWindow,\n} from \"@react-google-maps/api\";\nimport usePlacesAutocomplete, {\n  getGeocode,\n  getLatLng,\n} from \"use-places-autocomplete\";\nimport {\n  Combobox,\n  ComboboxInput,\n  ComboboxPopover,\n  ComboboxList,\n  ComboboxOption,\n} from \"@reach/combobox\";\nimport { formatRelative } from \"date-fns\";\nimport { center } from \"./components/getBrowserLocation\";\n\nimport \"@reach/combobox/styles.css\";\nimport { DisplayPlacesList, radius } from \"./components/displayPlaces\";\n\nimport { Button, Container } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  width: \"100vw\",\n  height: \"60vh\",\n};\n\nconst options = {\n  mapTypeControl: false,\n  fullscreenControl: false,\n  streetViewControl: false,\n};\n\nconsole.log(center.lat);\n\nfunction App() {\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n    libraries,\n  });\n\n  const [markers, setMarkers] = React.useState([]);\n  const [selected, setSelected] = React.useState(null);\n  const onMapClick = React.useCallback((event) => {\n    setMarkers((current) => [\n      ...current,\n      {\n        lat: event.latLng.lat(),\n        lng: event.latLng.lng(),\n        time: new Date(),\n      },\n    ]);\n  }, []);\n\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback((map) => {\n    mapRef.current = map;\n  }, []);\n\n  const panTo = React.useCallback(({ lat, lng }) => {\n    mapRef.current.panTo({ lat, lng });\n    mapRef.current.setZoom(17);\n  }, []);\n  if (loadError) return \"Error loading maps\";\n  if (!isLoaded) return \"Loading Maps\";\n\n  return (\n    <Container>\n      <Row></Row>\n      <Search panTo={panTo} />\n      <Locate panTo={panTo} />\n      <GoogleMap\n        mapContainerStyle={mapContainerStyle}\n        zoom={15}\n        center={center}\n        options={options}\n        onClick={onMapClick}\n        onLoad={onMapLoad}\n      >\n        {markers.map((marker) => (\n          <Marker\n            key={marker.time.toISOString()}\n            position={{ lat: marker.lat, lng: marker.lng }}\n            onClick={() => {\n              setSelected(marker);\n            }}\n          />\n        ))}\n\n        {selected ? (\n          <InfoWindow\n            position={{ lat: selected.lat, lng: selected.lng }}\n            onCloseClick={() => {\n              setSelected(null);\n            }}\n          >\n            <div>\n              <h1>Hello</h1>\n              <p>Clicked {formatRelative(selected.time, new Date())}</p>\n            </div>\n          </InfoWindow>\n        ) : null}\n      </GoogleMap>\n      <Button>Test Button</Button>\n      <DisplayPlacesList />\n    </Container>\n  );\n}\nexport default App;\nfunction Locate({ panTo }) {\n  return (\n    <Button\n      className=\"locate\"\n      onClick={() => {\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            panTo({\n              lat: position.coords.latitude,\n              lng: position.coords.longitude,\n            });\n          },\n          () => null,\n          options\n        );\n      }}\n    >\n      <img src=\"compass.svg\" alt=\"compass - locate me\" />\n    </Button>\n  );\n}\n\nfunction Search({ panTo }) {\n  const {\n    ready,\n    value,\n    suggestions: { status, data },\n    setValue,\n    clearSuggestions,\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: { lat: () => center.lat, lng: () => center.lng },\n      radius: radius,\n    },\n  });\n\n  return (\n    <div className=\"search\">\n      <Combobox\n        onSelect={async (address) => {\n          setValue(address, false);\n          clearSuggestions();\n          try {\n            const results = await getGeocode({ address });\n            const { lat, lng } = await getLatLng(results[0]);\n            panTo({ lat, lng });\n          } catch (error) {\n            console.log(\"error!\");\n          }\n        }}\n      >\n        <ComboboxInput\n          value={value}\n          onChange={(e) => {\n            setValue(e.target.value);\n          }}\n          disable={!ready}\n          placeholder=\"Enter your Point of Interest\"\n        />\n        <ComboboxPopover>\n          <ComboboxList>\n            {status === \"OK\" &&\n              data.map(({ id, description }) => (\n                <ComboboxOption key={id} value={description} />\n              ))}\n          </ComboboxList>\n        </ComboboxPopover>\n      </Combobox>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}