{"ast":null,"code":"var _jsxFileName = \"/home/andrei/Desktop/SoftDevProj/Playground/src/components/displayPlaces.js\";\nimport React, { Component } from \"react\";\nimport { center, GetBrowserGeoLocation } from \"./getBrowserLocation\";\nimport { Card, Accordion } from \"react-bootstrap\";\nexport let radius = 200;\nconst placeType = [\"point_of_interest\"];\nGetBrowserGeoLocation();\nconsole.log(center);\nconst url = \"https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=\" + center.lat + \",\" + center.lng + \"&radius=\" + radius + \"&type=\" + placeType + \"&key=\" + process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\nexport class DisplayPlacesList extends Component {\n  render() {\n    let places = [];\n    fetch(url).then(res => {\n      return res.json();\n    }).then(res => {\n      for (let googlePlace of res.results) {\n        var place = {};\n        var myLat = googlePlace.geometry.location.lat;\n        var myLong = googlePlace.geometry.location.lng;\n        var coordinate = {\n          latitude: myLat,\n          longitude: myLong\n        };\n        place[\"placeTypes\"] = googlePlace.types;\n        place[\"coordinate\"] = coordinate;\n        place[\"placeId\"] = googlePlace.place_id;\n        place[\"placeName\"] = googlePlace.name;\n        place[\"formattedAddress\"] = googlePlace.place_id;\n        places.push(place);\n      }\n\n      console.log(places);\n    }).catch(error => {\n      console.log(error);\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Accordion, {\n      defaultActiveKey: \"0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }\n    }, places.map(nearbyPlaces => /*#__PURE__*/React.createElement(Card, {\n      key: nearbyPlaces.placeId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Accordion.Toggle, {\n      as: Card.Header,\n      eventKey: \"0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 15\n      }\n    }, nearbyPlaces.placeName), /*#__PURE__*/React.createElement(Accordion.Collapse, {\n      eventKey: \"0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }\n    }, nearbyPlaces.formattedAddress))))));\n  }\n\n}","map":{"version":3,"sources":["/home/andrei/Desktop/SoftDevProj/Playground/src/components/displayPlaces.js"],"names":["React","Component","center","GetBrowserGeoLocation","Card","Accordion","radius","placeType","console","log","url","lat","lng","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","DisplayPlacesList","render","places","fetch","then","res","json","googlePlace","results","place","myLat","geometry","location","myLong","coordinate","latitude","longitude","types","place_id","name","push","catch","error","map","nearbyPlaces","placeId","Header","placeName","formattedAddress"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,EAAiBC,qBAAjB,QAA8C,sBAA9C;AACA,SAASC,IAAT,EAAeC,SAAf,QAAgC,iBAAhC;AACA,OAAO,IAAIC,MAAM,GAAG,GAAb;AAEP,MAAMC,SAAS,GAAG,CAAC,mBAAD,CAAlB;AAEAJ,qBAAqB;AACrBK,OAAO,CAACC,GAAR,CAAYP,MAAZ;AAEA,MAAMQ,GAAG,GACP,2EACAR,MAAM,CAACS,GADP,GAEA,GAFA,GAGAT,MAAM,CAACU,GAHP,GAIA,UAJA,GAKAN,MALA,GAMA,QANA,GAOAC,SAPA,GAQA,OARA,GASAM,OAAO,CAACC,GAAR,CAAYC,6BAVd;AAYA,OAAO,MAAMC,iBAAN,SAAgCf,SAAhC,CAA0C;AAC/CgB,EAAAA,MAAM,GAAG;AACP,QAAIC,MAAM,GAAG,EAAb;AACAC,IAAAA,KAAK,CAACT,GAAD,CAAL,CACGU,IADH,CACSC,GAAD,IAAS;AACb,aAAOA,GAAG,CAACC,IAAJ,EAAP;AACD,KAHH,EAIGF,IAJH,CAISC,GAAD,IAAS;AACb,WAAK,IAAIE,WAAT,IAAwBF,GAAG,CAACG,OAA5B,EAAqC;AACnC,YAAIC,KAAK,GAAG,EAAZ;AACA,YAAIC,KAAK,GAAGH,WAAW,CAACI,QAAZ,CAAqBC,QAArB,CAA8BjB,GAA1C;AACA,YAAIkB,MAAM,GAAGN,WAAW,CAACI,QAAZ,CAAqBC,QAArB,CAA8BhB,GAA3C;AACA,YAAIkB,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAEL,KADK;AAEfM,UAAAA,SAAS,EAAEH;AAFI,SAAjB;AAIAJ,QAAAA,KAAK,CAAC,YAAD,CAAL,GAAsBF,WAAW,CAACU,KAAlC;AACAR,QAAAA,KAAK,CAAC,YAAD,CAAL,GAAsBK,UAAtB;AACAL,QAAAA,KAAK,CAAC,SAAD,CAAL,GAAmBF,WAAW,CAACW,QAA/B;AACAT,QAAAA,KAAK,CAAC,WAAD,CAAL,GAAqBF,WAAW,CAACY,IAAjC;AACAV,QAAAA,KAAK,CAAC,kBAAD,CAAL,GAA4BF,WAAW,CAACW,QAAxC;AACAhB,QAAAA,MAAM,CAACkB,IAAP,CAAYX,KAAZ;AACD;;AACDjB,MAAAA,OAAO,CAACC,GAAR,CAAYS,MAAZ;AACD,KArBH,EAsBGmB,KAtBH,CAsBUC,KAAD,IAAW;AAChB9B,MAAAA,OAAO,CAACC,GAAR,CAAY6B,KAAZ;AACD,KAxBH;AAyBA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,SAAD;AAAW,MAAA,gBAAgB,EAAC,GAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGpB,MAAM,CAACqB,GAAP,CAAYC,YAAD,iBACV,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAEA,YAAY,CAACC,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,SAAD,CAAW,MAAX;AAAkB,MAAA,EAAE,EAAErC,IAAI,CAACsC,MAA3B;AAAmC,MAAA,QAAQ,EAAC,GAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGF,YAAY,CAACG,SADhB,CADF,eAIE,oBAAC,SAAD,CAAW,QAAX;AAAoB,MAAA,QAAQ,EAAC,GAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAYH,YAAY,CAACI,gBAAzB,CADF,CAJF,CADD,CADH,CADF,CADF;AAgBD;;AA5C8C","sourcesContent":["import React, { Component } from \"react\";\nimport { center, GetBrowserGeoLocation } from \"./getBrowserLocation\";\nimport { Card, Accordion } from \"react-bootstrap\";\nexport let radius = 200;\n\nconst placeType = [\"point_of_interest\"];\n\nGetBrowserGeoLocation();\nconsole.log(center);\n\nconst url =\n  \"https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=\" +\n  center.lat +\n  \",\" +\n  center.lng +\n  \"&radius=\" +\n  radius +\n  \"&type=\" +\n  placeType +\n  \"&key=\" +\n  process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\n\nexport class DisplayPlacesList extends Component {\n  render() {\n    let places = [];\n    fetch(url)\n      .then((res) => {\n        return res.json();\n      })\n      .then((res) => {\n        for (let googlePlace of res.results) {\n          var place = {};\n          var myLat = googlePlace.geometry.location.lat;\n          var myLong = googlePlace.geometry.location.lng;\n          var coordinate = {\n            latitude: myLat,\n            longitude: myLong,\n          };\n          place[\"placeTypes\"] = googlePlace.types;\n          place[\"coordinate\"] = coordinate;\n          place[\"placeId\"] = googlePlace.place_id;\n          place[\"placeName\"] = googlePlace.name;\n          place[\"formattedAddress\"] = googlePlace.place_id;\n          places.push(place);\n        }\n        console.log(places);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n    return (\n      <div>\n        <Accordion defaultActiveKey=\"0\">\n          {places.map((nearbyPlaces) => (\n            <Card key={nearbyPlaces.placeId}>\n              <Accordion.Toggle as={Card.Header} eventKey=\"0\">\n                {nearbyPlaces.placeName}\n              </Accordion.Toggle>\n              <Accordion.Collapse eventKey=\"0\">\n                <Card.Body>{nearbyPlaces.formattedAddress}</Card.Body>\n              </Accordion.Collapse>\n            </Card>\n          ))}\n        </Accordion>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}