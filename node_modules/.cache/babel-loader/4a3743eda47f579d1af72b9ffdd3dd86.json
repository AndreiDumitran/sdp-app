{"ast":null,"code":"var _jsxFileName = \"/home/andrei/Desktop/SoftDevProj/Playground/src/App.js\";\nimport React from \"react\";\nimport { usePosition } from \"./getBrowserLocation\";\nconst {\n  latitude,\n  longitude,\n  error\n} = usePosition();\nimport { GoogleMap, useLoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from \"use-places-autocomplete\";\nimport { Combobox, ComboboxInput, ComboboxPopover, ComboboxList, ComboboxOption } from \"@reach/combobox\";\nimport { formatRelative } from \"date-fns\";\nimport \"@reach/combobox/styles.css\";\nimport { DisplayPlacesList, radius } from \"./components/displayPlaces\";\nimport { Button, Container, Row, Col } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nconst center = {\n  lat: latitude,\n  lng: longitude\n};\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  width: \"100vw\",\n  height: \"60vh\"\n};\nconst options = {\n  mapTypeControl: false,\n  fullscreenControl: false,\n  streetViewControl: false\n};\n\nfunction App() {\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n    libraries\n  });\n  const [markers, setMarkers] = React.useState([]);\n  const [selected, setSelected] = React.useState(null);\n  const onMapClick = React.useCallback(event => {\n    setMarkers(current => [...current, {\n      lat: event.latLng.lat(),\n      lng: event.latLng.lng(),\n      time: new Date()\n    }]);\n  }, []);\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback(map => {\n    mapRef.current = map;\n  }, []);\n  const panTo = React.useCallback(({\n    lat,\n    lng\n  }) => {\n    mapRef.current.panTo({\n      lat,\n      lng\n    });\n    mapRef.current.setZoom(17);\n  }, []);\n  if (loadError) return \"Error loading maps\";\n  if (!isLoaded) return \"Loading Maps\";\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Search, {\n    panTo: panTo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Locate, {\n    panTo: panTo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(GoogleMap, {\n    mapContainerStyle: mapContainerStyle,\n    zoom: 15,\n    center: center,\n    options: options,\n    onClick: onMapClick,\n    onLoad: onMapLoad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, markers.map(marker => /*#__PURE__*/React.createElement(Marker, {\n    key: marker.time.toISOString(),\n    position: {\n      lat: marker.lat,\n      lng: marker.lng\n    },\n    onClick: () => {\n      setSelected(marker);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  })), selected ? /*#__PURE__*/React.createElement(InfoWindow, {\n    position: {\n      lat: selected.lat,\n      lng: selected.lng\n    },\n    onCloseClick: () => {\n      setSelected(null);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }\n  }, \"Hello\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }\n  }, \"Clicked \", formatRelative(selected.time, new Date())))) : null), /*#__PURE__*/React.createElement(DisplayPlacesList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default App;\n\nfunction Locate({\n  panTo\n}) {\n  return /*#__PURE__*/React.createElement(Button, {\n    className: \"locate\",\n    onClick: () => {\n      navigator.geolocation.getCurrentPosition(position => {\n        panTo({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n      }, () => null, options);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"compass.svg\",\n    alt: \"compass - locate me\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction Search({\n  panTo\n}) {\n  const {\n    ready,\n    value,\n    suggestions: {\n      status,\n      data\n    },\n    setValue,\n    clearSuggestions\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: {\n        lat: () => center.lat,\n        lng: () => center.lng\n      },\n      radius: radius\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Combobox, {\n    onSelect: async address => {\n      setValue(address, false);\n      clearSuggestions();\n\n      try {\n        const results = await getGeocode({\n          address\n        });\n        const {\n          lat,\n          lng\n        } = await getLatLng(results[0]);\n        panTo({\n          lat,\n          lng\n        });\n      } catch (error) {\n        console.log(\"error!\");\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ComboboxInput, {\n    value: value,\n    onChange: e => {\n      setValue(e.target.value);\n    },\n    disable: !ready,\n    placeholder: \"Enter your Point of Interest\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ComboboxPopover, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ComboboxList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 11\n    }\n  }, status === \"OK\" && data.map(({\n    id,\n    description\n  }) => /*#__PURE__*/React.createElement(ComboboxOption, {\n    key: id,\n    value: description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 17\n    }\n  }))))));\n}","map":{"version":3,"sources":["/home/andrei/Desktop/SoftDevProj/Playground/src/App.js"],"names":["React","usePosition","latitude","longitude","error","GoogleMap","useLoadScript","Marker","InfoWindow","usePlacesAutocomplete","getGeocode","getLatLng","Combobox","ComboboxInput","ComboboxPopover","ComboboxList","ComboboxOption","formatRelative","DisplayPlacesList","radius","Button","Container","Row","Col","center","lat","lng","libraries","mapContainerStyle","width","height","options","mapTypeControl","fullscreenControl","streetViewControl","App","isLoaded","loadError","googleMapsApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","markers","setMarkers","useState","selected","setSelected","onMapClick","useCallback","event","current","latLng","time","Date","mapRef","useRef","onMapLoad","map","panTo","setZoom","marker","toISOString","Locate","navigator","geolocation","getCurrentPosition","position","coords","Search","ready","value","suggestions","status","data","setValue","clearSuggestions","requestOptions","location","address","results","console","log","e","target","id","description"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { usePosition } from \"./getBrowserLocation\";\nconst { latitude, longitude, error } = usePosition();\nimport {\n  GoogleMap,\n  useLoadScript,\n  Marker,\n  InfoWindow,\n} from \"@react-google-maps/api\";\nimport usePlacesAutocomplete, {\n  getGeocode,\n  getLatLng,\n} from \"use-places-autocomplete\";\nimport {\n  Combobox,\n  ComboboxInput,\n  ComboboxPopover,\n  ComboboxList,\n  ComboboxOption,\n} from \"@reach/combobox\";\nimport { formatRelative } from \"date-fns\";\n\nimport \"@reach/combobox/styles.css\";\nimport { DisplayPlacesList, radius } from \"./components/displayPlaces\";\n\nimport { Button, Container, Row, Col } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst center = {\n  lat: latitude,\n  lng: longitude,\n};\n\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  width: \"100vw\",\n  height: \"60vh\",\n};\n\nconst options = {\n  mapTypeControl: false,\n  fullscreenControl: false,\n  streetViewControl: false,\n};\n\nfunction App() {\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n    libraries,\n  });\n\n  const [markers, setMarkers] = React.useState([]);\n  const [selected, setSelected] = React.useState(null);\n  const onMapClick = React.useCallback((event) => {\n    setMarkers((current) => [\n      ...current,\n      {\n        lat: event.latLng.lat(),\n        lng: event.latLng.lng(),\n        time: new Date(),\n      },\n    ]);\n  }, []);\n\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback((map) => {\n    mapRef.current = map;\n  }, []);\n\n  const panTo = React.useCallback(({ lat, lng }) => {\n    mapRef.current.panTo({ lat, lng });\n    mapRef.current.setZoom(17);\n  }, []);\n  if (loadError) return \"Error loading maps\";\n  if (!isLoaded) return \"Loading Maps\";\n\n  return (\n    <Container>\n      <Row>\n        <Col>\n          <Search panTo={panTo} />\n        </Col>\n        <Col>\n          <Locate panTo={panTo} />\n        </Col>\n      </Row>\n      <Row>\n        <GoogleMap\n          mapContainerStyle={mapContainerStyle}\n          zoom={15}\n          center={center}\n          options={options}\n          onClick={onMapClick}\n          onLoad={onMapLoad}\n        >\n          {markers.map((marker) => (\n            <Marker\n              key={marker.time.toISOString()}\n              position={{ lat: marker.lat, lng: marker.lng }}\n              onClick={() => {\n                setSelected(marker);\n              }}\n            />\n          ))}\n\n          {selected ? (\n            <InfoWindow\n              position={{ lat: selected.lat, lng: selected.lng }}\n              onCloseClick={() => {\n                setSelected(null);\n              }}\n            >\n              <div>\n                <h1>Hello</h1>\n                <p>Clicked {formatRelative(selected.time, new Date())}</p>\n              </div>\n            </InfoWindow>\n          ) : null}\n        </GoogleMap>\n        <DisplayPlacesList />\n      </Row>\n    </Container>\n  );\n}\nexport default App;\nfunction Locate({ panTo }) {\n  return (\n    <Button\n      className=\"locate\"\n      onClick={() => {\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            panTo({\n              lat: position.coords.latitude,\n              lng: position.coords.longitude,\n            });\n          },\n          () => null,\n          options\n        );\n      }}\n    >\n      <img src=\"compass.svg\" alt=\"compass - locate me\" />\n    </Button>\n  );\n}\n\nfunction Search({ panTo }) {\n  const {\n    ready,\n    value,\n    suggestions: { status, data },\n    setValue,\n    clearSuggestions,\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: { lat: () => center.lat, lng: () => center.lng },\n      radius: radius,\n    },\n  });\n\n  return (\n    <div className=\"search\">\n      <Combobox\n        onSelect={async (address) => {\n          setValue(address, false);\n          clearSuggestions();\n          try {\n            const results = await getGeocode({ address });\n            const { lat, lng } = await getLatLng(results[0]);\n            panTo({ lat, lng });\n          } catch (error) {\n            console.log(\"error!\");\n          }\n        }}\n      >\n        <ComboboxInput\n          value={value}\n          onChange={(e) => {\n            setValue(e.target.value);\n          }}\n          disable={!ready}\n          placeholder=\"Enter your Point of Interest\"\n        />\n        <ComboboxPopover>\n          <ComboboxList>\n            {status === \"OK\" &&\n              data.map(({ id, description }) => (\n                <ComboboxOption key={id} value={description} />\n              ))}\n          </ComboboxList>\n        </ComboboxPopover>\n      </Combobox>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}