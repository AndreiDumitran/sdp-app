{"ast":null,"code":"var _jsxFileName = \"/home/andrei/Desktop/SoftDevProj/Playground/src/App.js\";\nimport React from \"react\";\nimport { GoogleMap, useLoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from \"use-places-autocomplete\";\nimport { Combobox, ComboboxInput, ComboboxPopover, ComboboxList, ComboboxOption } from \"@reach/combobox\";\nimport { formatRelative } from \"date-fns\";\nimport \"@reach/combobox/styles.css\";\nimport { googleAPIKey } from \"./GooglePlacesAPI\";\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  width: \"100vw\",\n  height: \"50vh\"\n};\nconst center = {\n  lat: 52.408054,\n  lng: -1.510556\n};\nconst options = {\n  mapTypeControl: false,\n  fullscreenControl: false,\n  streetViewControl: false\n};\nconst latitude = 37.773972;\nconst longitude = -122.431297;\nlet radius = 1 * 1000;\nconst url = \"https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=\" + center.lat + \",\" + center.lng + \"&radius=\" + radius + //  '&type=' +\n//  placeType +\n\"&key=\" + googleAPIKey;\nlet places = [];\nfetch(url).then(res => {\n  return res.json();\n}).then(res => {\n  for (let googlePlace of res.results) {\n    var place = {};\n    var myLat = googlePlace.geometry.location.lat;\n    var myLong = googlePlace.geometry.location.lng;\n    var coordinate = {\n      latitude: myLat,\n      longitude: myLong\n    };\n    place[\"placeTypes\"] = googlePlace.types;\n    place[\"coordinate\"] = coordinate;\n    place[\"placeId\"] = googlePlace.place_id;\n    place[\"placeName\"] = googlePlace.name;\n    places.push(place);\n  } // Show all the places around 4 km from San Francisco.\n\n\n  console.log(places.map(places2 => places2.placeName));\n}).catch(error => {\n  console.log(error);\n});\nexport default function App() {\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n    libraries\n  });\n  const [markers, setMarkers] = React.useState([]);\n  const [selected, setSelected] = React.useState(null);\n  const onMapClick = React.useCallback(event => {\n    setMarkers(current => [...current, {\n      lat: event.latLng.lat(),\n      lng: event.latLng.lng(),\n      time: new Date()\n    }]);\n  }, []);\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback(map => {\n    mapRef.current = map;\n  }, []);\n  const panTo = React.useCallback(({\n    lat,\n    lng\n  }) => {\n    mapRef.current.panTo({\n      lat,\n      lng\n    });\n    mapRef.current.setZoom(16);\n  }, []);\n  if (loadError) return \"Error loading maps\";\n  if (!isLoaded) return \"Loading Maps\";\n  const listItems = places.map(d => /*#__PURE__*/React.createElement(\"li\", {\n    key: d.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 39\n    }\n  }, d.name));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"centered\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Search, {\n    panTo: panTo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Locate, {\n    panTo: panTo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(GoogleMap, {\n    mapContainerStyle: mapContainerStyle,\n    zoom: 15,\n    center: center,\n    options: options,\n    onClick: onMapClick,\n    onLoad: onMapLoad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, markers.map(marker => /*#__PURE__*/React.createElement(Marker, {\n    key: marker.time.toISOString(),\n    position: {\n      lat: marker.lat,\n      lng: marker.lng\n    },\n    onClick: () => {\n      setSelected(marker);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }\n  })), selected ? /*#__PURE__*/React.createElement(InfoWindow, {\n    position: {\n      lat: selected.lat,\n      lng: selected.lng\n    },\n    onCloseClick: () => {\n      setSelected(null);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 15\n    }\n  }, \"Hello\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 15\n    }\n  }, \"Clicked \", formatRelative(selected.time, new Date())))) : null), /*#__PURE__*/React.createElement(DisplayPlaces, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction Locate({\n  panTo\n}) {\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"locate\",\n    onClick: () => {\n      navigator.geolocation.getCurrentPosition(position => {\n        panTo({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n      }, () => null, options);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"compass.svg\",\n    alt: \"compass - locate me\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction Search({\n  panTo\n}) {\n  const {\n    ready,\n    value,\n    suggestions: {\n      status,\n      data\n    },\n    setValue,\n    clearSuggestions\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: {\n        lat: () => 43.6532,\n        lng: () => -79.3832\n      },\n      radius: 1 * 1000\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Combobox, {\n    onSelect: async address => {\n      setValue(address, false);\n      clearSuggestions();\n\n      try {\n        const results = await getGeocode({\n          address\n        });\n        const {\n          lat,\n          lng\n        } = await getLatLng(results[0]);\n        panTo({\n          lat,\n          lng\n        });\n      } catch (error) {\n        console.log(\"error!\");\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ComboboxInput, {\n    value: value,\n    onChange: e => {\n      setValue(e.target.value);\n    },\n    disable: !ready,\n    placeholder: \"Enter your Point of Interest\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ComboboxPopover, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ComboboxList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 11\n    }\n  }, status === \"OK\" && data.map(({\n    id,\n    description\n  }) => /*#__PURE__*/React.createElement(ComboboxOption, {\n    key: id,\n    value: description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 17\n    }\n  }))))));\n}\n\nconst people = [{\n  name: \"aaa\"\n}, {\n  name: \"bbb\"\n}];\n\nfunction DisplayPlaces() {\n  return /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 5\n    }\n  }, places.map(nearbyPlaces => /*#__PURE__*/React.createElement(\"li\", {\n    key: nearbyPlaces.placeId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 9\n    }\n  }, nearbyPlaces.name)));\n}","map":{"version":3,"sources":["/home/andrei/Desktop/SoftDevProj/Playground/src/App.js"],"names":["React","GoogleMap","useLoadScript","Marker","InfoWindow","usePlacesAutocomplete","getGeocode","getLatLng","Combobox","ComboboxInput","ComboboxPopover","ComboboxList","ComboboxOption","formatRelative","googleAPIKey","libraries","mapContainerStyle","width","height","center","lat","lng","options","mapTypeControl","fullscreenControl","streetViewControl","latitude","longitude","radius","url","places","fetch","then","res","json","googlePlace","results","place","myLat","geometry","location","myLong","coordinate","types","place_id","name","push","console","log","map","places2","placeName","catch","error","App","isLoaded","loadError","googleMapsApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","markers","setMarkers","useState","selected","setSelected","onMapClick","useCallback","event","current","latLng","time","Date","mapRef","useRef","onMapLoad","panTo","setZoom","listItems","d","marker","toISOString","Locate","navigator","geolocation","getCurrentPosition","position","coords","Search","ready","value","suggestions","status","data","setValue","clearSuggestions","requestOptions","address","e","target","id","description","people","DisplayPlaces","nearbyPlaces","placeId"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  GoogleMap,\n  useLoadScript,\n  Marker,\n  InfoWindow,\n} from \"@react-google-maps/api\";\nimport usePlacesAutocomplete, {\n  getGeocode,\n  getLatLng,\n} from \"use-places-autocomplete\";\nimport {\n  Combobox,\n  ComboboxInput,\n  ComboboxPopover,\n  ComboboxList,\n  ComboboxOption,\n} from \"@reach/combobox\";\nimport { formatRelative } from \"date-fns\";\n\nimport \"@reach/combobox/styles.css\";\nimport { googleAPIKey } from \"./GooglePlacesAPI\";\n\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  width: \"100vw\",\n  height: \"50vh\",\n};\nconst center = {\n  lat: 52.408054,\n  lng: -1.510556,\n};\nconst options = {\n  mapTypeControl: false,\n  fullscreenControl: false,\n  streetViewControl: false,\n};\nconst latitude = 37.773972;\nconst longitude = -122.431297;\n\nlet radius = 1 * 1000;\nconst url =\n  \"https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=\" +\n  center.lat +\n  \",\" +\n  center.lng +\n  \"&radius=\" +\n  radius +\n  //  '&type=' +\n  //  placeType +\n  \"&key=\" +\n  googleAPIKey;\n\nlet places = [];\nfetch(url)\n  .then((res) => {\n    return res.json();\n  })\n  .then((res) => {\n    for (let googlePlace of res.results) {\n      var place = {};\n      var myLat = googlePlace.geometry.location.lat;\n      var myLong = googlePlace.geometry.location.lng;\n      var coordinate = {\n        latitude: myLat,\n        longitude: myLong,\n      };\n      place[\"placeTypes\"] = googlePlace.types;\n      place[\"coordinate\"] = coordinate;\n      place[\"placeId\"] = googlePlace.place_id;\n      place[\"placeName\"] = googlePlace.name;\n      places.push(place);\n    }\n    // Show all the places around 4 km from San Francisco.\n    console.log(places.map((places2) => places2.placeName));\n  })\n  .catch((error) => {\n    console.log(error);\n  });\n\nexport default function App() {\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n    libraries,\n  });\n\n  const [markers, setMarkers] = React.useState([]);\n  const [selected, setSelected] = React.useState(null);\n  const onMapClick = React.useCallback((event) => {\n    setMarkers((current) => [\n      ...current,\n      {\n        lat: event.latLng.lat(),\n        lng: event.latLng.lng(),\n        time: new Date(),\n      },\n    ]);\n  }, []);\n\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback((map) => {\n    mapRef.current = map;\n  }, []);\n\n  const panTo = React.useCallback(({ lat, lng }) => {\n    mapRef.current.panTo({ lat, lng });\n    mapRef.current.setZoom(16);\n  }, []);\n  if (loadError) return \"Error loading maps\";\n  if (!isLoaded) return \"Loading Maps\";\n\n  const listItems = places.map((d) => <li key={d.name}>{d.name}</li>);\n  return (\n    <div className=\"centered\">\n      <Search panTo={panTo} />\n      <Locate panTo={panTo} />\n      <GoogleMap\n        mapContainerStyle={mapContainerStyle}\n        zoom={15}\n        center={center}\n        options={options}\n        onClick={onMapClick}\n        onLoad={onMapLoad}\n      >\n        {markers.map((marker) => (\n          <Marker\n            key={marker.time.toISOString()}\n            position={{ lat: marker.lat, lng: marker.lng }}\n            onClick={() => {\n              setSelected(marker);\n            }}\n          />\n        ))}\n\n        {selected ? (\n          <InfoWindow\n            position={{ lat: selected.lat, lng: selected.lng }}\n            onCloseClick={() => {\n              setSelected(null);\n            }}\n          >\n            <div>\n              <h1>Hello</h1>\n              <p>Clicked {formatRelative(selected.time, new Date())}</p>\n            </div>\n          </InfoWindow>\n        ) : null}\n      </GoogleMap>\n      <DisplayPlaces />\n    </div>\n  );\n}\nfunction Locate({ panTo }) {\n  return (\n    <button\n      className=\"locate\"\n      onClick={() => {\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            panTo({\n              lat: position.coords.latitude,\n              lng: position.coords.longitude,\n            });\n          },\n          () => null,\n          options\n        );\n      }}\n    >\n      <img src=\"compass.svg\" alt=\"compass - locate me\" />\n    </button>\n  );\n}\n\nfunction Search({ panTo }) {\n  const {\n    ready,\n    value,\n    suggestions: { status, data },\n    setValue,\n    clearSuggestions,\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: { lat: () => 43.6532, lng: () => -79.3832 },\n      radius: 1 * 1000,\n    },\n  });\n\n  return (\n    <div className=\"search\">\n      <Combobox\n        onSelect={async (address) => {\n          setValue(address, false);\n          clearSuggestions();\n          try {\n            const results = await getGeocode({ address });\n            const { lat, lng } = await getLatLng(results[0]);\n            panTo({ lat, lng });\n          } catch (error) {\n            console.log(\"error!\");\n          }\n        }}\n      >\n        <ComboboxInput\n          value={value}\n          onChange={(e) => {\n            setValue(e.target.value);\n          }}\n          disable={!ready}\n          placeholder=\"Enter your Point of Interest\"\n        />\n        <ComboboxPopover>\n          <ComboboxList>\n            {status === \"OK\" &&\n              data.map(({ id, description }) => (\n                <ComboboxOption key={id} value={description} />\n              ))}\n          </ComboboxList>\n        </ComboboxPopover>\n      </Combobox>\n    </div>\n  );\n}\nconst people = [{ name: \"aaa\" }, { name: \"bbb\" }];\nfunction DisplayPlaces() {\n  return (\n    <ul>\n      {places.map((nearbyPlaces) => (\n        <li key={nearbyPlaces.placeId}>{nearbyPlaces.name}</li>\n      ))}\n    </ul>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}