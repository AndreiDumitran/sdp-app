{"ast":null,"code":"var _jsxFileName = \"/home/andrei/Desktop/SoftDevProj/Playground/src/components/map.js\";\nimport React, { Component } from \"react\";\nimport { GoogleMap, useLoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from \"use-places-autocomplete\";\nimport { Combobox, ComboboxInput, ComboboxPopover, ComboboxList, ComboboxOption } from \"@reach/combobox\";\nimport { formatRelative } from \"date-fns\";\nimport \"@reach/combobox/styles.css\";\nimport { googleAPIKey, placeType } from \"./GooglePlacesAPI\";\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  width: \"100vw\",\n  height: \"50vh\"\n};\nexport var center = {\n  lat: 52.406215,\n  lng: -1.529193\n};\nconsole.log(center);\nconst options = {\n  mapTypeControl: false,\n  fullscreenControl: false,\n  streetViewControl: false\n};\nexport class Map extends Component {\n  render() {\n    const {\n      isLoaded,\n      loadError\n    } = useLoadScript({\n      googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n      libraries\n    });\n    const [markers, setMarkers] = React.useState([]);\n    const [selected, setSelected] = React.useState(null);\n    const onMapClick = React.useCallback(event => {\n      setMarkers(current => [...current, {\n        lat: event.latLng.lat(),\n        lng: event.latLng.lng(),\n        time: new Date()\n      }]);\n    }, []);\n    const mapRef = React.useRef();\n    const onMapLoad = React.useCallback(map => {\n      mapRef.current = map;\n    }, []);\n    const panTo = React.useCallback(({\n      lat,\n      lng\n    }) => {\n      mapRef.current.panTo({\n        lat,\n        lng\n      });\n      mapRef.current.setZoom(16);\n    }, []);\n    if (loadError) return \"Error loading maps\";\n    if (!isLoaded) return \"Loading Maps\";\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"centered\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Search, {\n      panTo: panTo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Locate, {\n      panTo: panTo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(GoogleMap, {\n      mapContainerStyle: mapContainerStyle,\n      zoom: 15,\n      center: center,\n      options: options,\n      onClick: onMapClick,\n      onLoad: onMapLoad,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }\n    }, markers.map(marker => /*#__PURE__*/React.createElement(Marker, {\n      key: marker.time.toISOString(),\n      position: {\n        lat: marker.lat,\n        lng: marker.lng\n      },\n      onClick: () => {\n        setSelected(marker);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }\n    })), selected ? /*#__PURE__*/React.createElement(InfoWindow, {\n      position: {\n        lat: selected.lat,\n        lng: selected.lng\n      },\n      onCloseClick: () => {\n        setSelected(null);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }\n    }, \"Hello\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }\n    }, \"Clicked \", formatRelative(selected.time, new Date())))) : null));\n  }\n\n}\n\nfunction Locate({\n  panTo\n}) {\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"locate\",\n    onClick: () => {\n      navigator.geolocation.getCurrentPosition(position => {\n        panTo({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n      }, () => null, options);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"compass.svg\",\n    alt: \"compass - locate me\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction Search({\n  panTo\n}) {\n  const {\n    ready,\n    value,\n    suggestions: {\n      status,\n      data\n    },\n    setValue,\n    clearSuggestions\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: {\n        lat: () => center.lat,\n        lng: () => center.lng\n      },\n      radius: 1 * 1000\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Combobox, {\n    onSelect: async address => {\n      setValue(address, false);\n      clearSuggestions();\n\n      try {\n        const results = await getGeocode({\n          address\n        });\n        const {\n          lat,\n          lng\n        } = await getLatLng(results[0]);\n        panTo({\n          lat,\n          lng\n        });\n      } catch (error) {\n        console.log(\"error!\");\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ComboboxInput, {\n    value: value,\n    onChange: e => {\n      setValue(e.target.value);\n    },\n    disable: !ready,\n    placeholder: \"Enter your Point of Interest\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ComboboxPopover, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ComboboxList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 11\n    }\n  }, status === \"OK\" && data.map(({\n    id,\n    description\n  }) => /*#__PURE__*/React.createElement(ComboboxOption, {\n    key: id,\n    value: description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 17\n    }\n  }))))));\n}","map":{"version":3,"sources":["/home/andrei/Desktop/SoftDevProj/Playground/src/components/map.js"],"names":["React","Component","GoogleMap","useLoadScript","Marker","InfoWindow","usePlacesAutocomplete","getGeocode","getLatLng","Combobox","ComboboxInput","ComboboxPopover","ComboboxList","ComboboxOption","formatRelative","googleAPIKey","placeType","libraries","mapContainerStyle","width","height","center","lat","lng","console","log","options","mapTypeControl","fullscreenControl","streetViewControl","Map","render","isLoaded","loadError","googleMapsApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","markers","setMarkers","useState","selected","setSelected","onMapClick","useCallback","event","current","latLng","time","Date","mapRef","useRef","onMapLoad","map","panTo","setZoom","marker","toISOString","Locate","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","Search","ready","value","suggestions","status","data","setValue","clearSuggestions","requestOptions","location","radius","address","results","error","e","target","id","description"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  GoogleMap,\n  useLoadScript,\n  Marker,\n  InfoWindow,\n} from \"@react-google-maps/api\";\nimport usePlacesAutocomplete, {\n  getGeocode,\n  getLatLng,\n} from \"use-places-autocomplete\";\nimport {\n  Combobox,\n  ComboboxInput,\n  ComboboxPopover,\n  ComboboxList,\n  ComboboxOption,\n} from \"@reach/combobox\";\nimport { formatRelative } from \"date-fns\";\n\nimport \"@reach/combobox/styles.css\";\nimport { googleAPIKey, placeType } from \"./GooglePlacesAPI\";\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  width: \"100vw\",\n  height: \"50vh\",\n};\n\nexport var center = {\n  lat: 52.406215,\n  lng: -1.529193,\n};\n\nconsole.log(center);\n\nconst options = {\n  mapTypeControl: false,\n  fullscreenControl: false,\n  streetViewControl: false,\n};\n\nexport class Map extends Component {\n  render() {\n    const { isLoaded, loadError } = useLoadScript({\n      googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n      libraries,\n    });\n\n    const [markers, setMarkers] = React.useState([]);\n    const [selected, setSelected] = React.useState(null);\n    const onMapClick = React.useCallback((event) => {\n      setMarkers((current) => [\n        ...current,\n        {\n          lat: event.latLng.lat(),\n          lng: event.latLng.lng(),\n          time: new Date(),\n        },\n      ]);\n    }, []);\n\n    const mapRef = React.useRef();\n    const onMapLoad = React.useCallback((map) => {\n      mapRef.current = map;\n    }, []);\n\n    const panTo = React.useCallback(({ lat, lng }) => {\n      mapRef.current.panTo({ lat, lng });\n      mapRef.current.setZoom(16);\n    }, []);\n    if (loadError) return \"Error loading maps\";\n    if (!isLoaded) return \"Loading Maps\";\n    return (\n      <div className=\"centered\">\n        <Search panTo={panTo} />\n        <Locate panTo={panTo} />\n        <GoogleMap\n          mapContainerStyle={mapContainerStyle}\n          zoom={15}\n          center={center}\n          options={options}\n          onClick={onMapClick}\n          onLoad={onMapLoad}\n        >\n          {markers.map((marker) => (\n            <Marker\n              key={marker.time.toISOString()}\n              position={{ lat: marker.lat, lng: marker.lng }}\n              onClick={() => {\n                setSelected(marker);\n              }}\n            />\n          ))}\n\n          {selected ? (\n            <InfoWindow\n              position={{ lat: selected.lat, lng: selected.lng }}\n              onCloseClick={() => {\n                setSelected(null);\n              }}\n            >\n              <div>\n                <h1>Hello</h1>\n                <p>Clicked {formatRelative(selected.time, new Date())}</p>\n              </div>\n            </InfoWindow>\n          ) : null}\n        </GoogleMap>\n      </div>\n    );\n  }\n}\n\nfunction Locate({ panTo }) {\n  return (\n    <button\n      className=\"locate\"\n      onClick={() => {\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            panTo({\n              lat: position.coords.latitude,\n              lng: position.coords.longitude,\n            });\n          },\n          () => null,\n          options\n        );\n      }}\n    >\n      <img src=\"compass.svg\" alt=\"compass - locate me\" />\n    </button>\n  );\n}\n\nfunction Search({ panTo }) {\n  const {\n    ready,\n    value,\n    suggestions: { status, data },\n    setValue,\n    clearSuggestions,\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: { lat: () => center.lat, lng: () => center.lng },\n      radius: 1 * 1000,\n    },\n  });\n\n  return (\n    <div className=\"search\">\n      <Combobox\n        onSelect={async (address) => {\n          setValue(address, false);\n          clearSuggestions();\n          try {\n            const results = await getGeocode({ address });\n            const { lat, lng } = await getLatLng(results[0]);\n            panTo({ lat, lng });\n          } catch (error) {\n            console.log(\"error!\");\n          }\n        }}\n      >\n        <ComboboxInput\n          value={value}\n          onChange={(e) => {\n            setValue(e.target.value);\n          }}\n          disable={!ready}\n          placeholder=\"Enter your Point of Interest\"\n        />\n        <ComboboxPopover>\n          <ComboboxList>\n            {status === \"OK\" &&\n              data.map(({ id, description }) => (\n                <ComboboxOption key={id} value={description} />\n              ))}\n          </ComboboxList>\n        </ComboboxPopover>\n      </Combobox>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}