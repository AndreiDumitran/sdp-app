{"ast":null,"code":"var _jsxFileName = \"/home/andrei/Desktop/SoftDevProj/Playground/src/App.js\";\nimport React from \"react\";\nimport { GoogleMap, useLoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from \"use-places-autocomplete\";\nimport { Combobox, ComboboxInput, ComboboxPopover, ComboboxList, ComboboxOption } from \"@reach/combobox\";\nimport { formatRelative } from \"date-fns\";\nimport \"@reach/combobox/styles.css\";\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  width: \"100vw\",\n  height: \"50vh\"\n};\nconst center = {\n  lat: 52.408054,\n  lng: -1.510556\n};\nconst options = {\n  mapTypeControl: false,\n  fullscreenControl: false,\n  streetViewControl: false\n};\nexport default function App() {\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n    libraries\n  });\n  const [markers, setMarkers] = React.useState([]);\n  const [selected, setSelected] = React.useState(null);\n  const onMapClick = React.useCallback(event => {\n    setMarkers(current => [...current, {\n      lat: event.latLng.lat(),\n      lng: event.latLng.lng(),\n      time: new Date()\n    }]);\n  }, []);\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback(map => {\n    mapRef.current = map;\n  }, []);\n  const panTo = React.useCallback(({\n    lat,\n    lng\n  }) => {\n    mapRef.current.panTo({\n      lat,\n      lng\n    });\n    mapRef.current.setZoom(16);\n  }, []);\n  if (loadError) return \"Error loading maps\";\n  if (!isLoaded) return \"Loading Maps\";\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"centered\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Search, {\n    panTo: panTo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Locate, {\n    panTo: panTo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(GoogleMap, {\n    mapContainerStyle: mapContainerStyle,\n    zoom: 15,\n    center: center,\n    options: options,\n    onClick: onMapClick,\n    onLoad: onMapLoad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, markers.map(marker => /*#__PURE__*/React.createElement(Marker, {\n    key: marker.time.toISOString(),\n    position: {\n      lat: marker.lat,\n      lng: marker.lng\n    },\n    onClick: () => {\n      setSelected(marker);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  })), selected ? /*#__PURE__*/React.createElement(InfoWindow, {\n    position: {\n      lat: selected.lat,\n      lng: selected.lng\n    },\n    onCloseClick: () => {\n      setSelected(null);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 15\n    }\n  }, \"Hello\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 15\n    }\n  }, \"Clicked \", formatRelative(selected.time, new Date())))) : null));\n}\n\nfetchNearestPlacesFromGoogle = () => {\n  const latitude = 25.0756; // you can update it with user's latitude & Longitude\n\n  const longitude = 55.1454;\n  let radMetter = 2 * 1000; // Search withing 2 KM radius\n\n  const url = \"https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=\" + latitude + \",\" + longitude + \"&radius=\" + radMetter + \"&key=\" + YOUR_API_KEY;\n  fetch(url).then(res => {\n    return res.json();\n  }).then(res => {\n    var places = []; // This Array WIll contain locations received from google\n\n    for (let googlePlace of res.results) {\n      var place = {};\n      var lat = googlePlace.geometry.location.lat;\n      var lng = googlePlace.geometry.location.lng;\n      var coordinate = {\n        latitude: lat,\n        longitude: lng\n      };\n      var gallery = [];\n\n      if (googlePlace.photos) {\n        for (let photo of googlePlace.photos) {\n          var photoUrl = Urls.GooglePicBaseUrl + photo.photo_reference;\n          gallery.push(photoUrl);\n        }\n      }\n\n      place[\"placeTypes\"] = googlePlace.types;\n      place[\"coordinate\"] = coordinate;\n      place[\"placeId\"] = googlePlace.place_id;\n      place[\"placeName\"] = googlePlace.name;\n      place[\"gallery\"] = gallery;\n      places.push(place);\n    } // Do your work here with places Array\n\n  }).catch(error => {\n    console.log(error);\n  });\n};\n\nfunction Locate({\n  panTo\n}) {\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"locate\",\n    onClick: () => {\n      navigator.geolocation.getCurrentPosition(position => {\n        panTo({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n      }, () => null, options);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"compass.svg\",\n    alt: \"compass - locate me\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction Search({\n  panTo\n}) {\n  const {\n    ready,\n    value,\n    suggestions: {\n      status,\n      data\n    },\n    setValue,\n    clearSuggestions\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: {\n        lat: () => 43.6532,\n        lng: () => -79.3832\n      },\n      radius: 1 * 1000\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Combobox, {\n    onSelect: async address => {\n      setValue(address, false);\n      clearSuggestions();\n\n      try {\n        const results = await getGeocode({\n          address\n        });\n        const {\n          lat,\n          lng\n        } = await getLatLng(results[0]);\n        panTo({\n          lat,\n          lng\n        });\n      } catch (error) {\n        console.log(\"error!\");\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ComboboxInput, {\n    value: value,\n    onChange: e => {\n      setValue(e.target.value);\n    },\n    disable: !ready,\n    placeholder: \"Enter your Point of Interest\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ComboboxPopover, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ComboboxList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 11\n    }\n  }, status === \"OK\" && data.map(({\n    id,\n    description\n  }) => /*#__PURE__*/React.createElement(ComboboxOption, {\n    key: id,\n    value: description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 17\n    }\n  }))))));\n}","map":{"version":3,"sources":["/home/andrei/Desktop/SoftDevProj/Playground/src/App.js"],"names":["React","GoogleMap","useLoadScript","Marker","InfoWindow","usePlacesAutocomplete","getGeocode","getLatLng","Combobox","ComboboxInput","ComboboxPopover","ComboboxList","ComboboxOption","formatRelative","libraries","mapContainerStyle","width","height","center","lat","lng","options","mapTypeControl","fullscreenControl","streetViewControl","App","isLoaded","loadError","googleMapsApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","markers","setMarkers","useState","selected","setSelected","onMapClick","useCallback","event","current","latLng","time","Date","mapRef","useRef","onMapLoad","map","panTo","setZoom","marker","toISOString","fetchNearestPlacesFromGoogle","latitude","longitude","radMetter","url","YOUR_API_KEY","fetch","then","res","json","places","googlePlace","results","place","geometry","location","coordinate","gallery","photos","photo","photoUrl","Urls","GooglePicBaseUrl","photo_reference","push","types","place_id","name","catch","error","console","log","Locate","navigator","geolocation","getCurrentPosition","position","coords","Search","ready","value","suggestions","status","data","setValue","clearSuggestions","requestOptions","radius","address","e","target","id","description"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,SADF,EAEEC,aAFF,EAGEC,MAHF,EAIEC,UAJF,QAKO,wBALP;AAMA,OAAOC,qBAAP,IACEC,UADF,EAEEC,SAFF,QAGO,yBAHP;AAIA,SACEC,QADF,EAEEC,aAFF,EAGEC,eAHF,EAIEC,YAJF,EAKEC,cALF,QAMO,iBANP;AAOA,SAASC,cAAT,QAA+B,UAA/B;AAEA,OAAO,4BAAP;AAEA,MAAMC,SAAS,GAAG,CAAC,QAAD,CAAlB;AACA,MAAMC,iBAAiB,GAAG;AACxBC,EAAAA,KAAK,EAAE,OADiB;AAExBC,EAAAA,MAAM,EAAE;AAFgB,CAA1B;AAIA,MAAMC,MAAM,GAAG;AACbC,EAAAA,GAAG,EAAE,SADQ;AAEbC,EAAAA,GAAG,EAAE,CAAC;AAFO,CAAf;AAIA,MAAMC,OAAO,GAAG;AACdC,EAAAA,cAAc,EAAE,KADF;AAEdC,EAAAA,iBAAiB,EAAE,KAFL;AAGdC,EAAAA,iBAAiB,EAAE;AAHL,CAAhB;AAMA,eAAe,SAASC,GAAT,GAAe;AAC5B,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA0BzB,aAAa,CAAC;AAC5C0B,IAAAA,gBAAgB,EAAEC,OAAO,CAACC,GAAR,CAAYC,6BADc;AAE5CjB,IAAAA;AAF4C,GAAD,CAA7C;AAKA,QAAM,CAACkB,OAAD,EAAUC,UAAV,IAAwBjC,KAAK,CAACkC,QAAN,CAAe,EAAf,CAA9B;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BpC,KAAK,CAACkC,QAAN,CAAe,IAAf,CAAhC;AACA,QAAMG,UAAU,GAAGrC,KAAK,CAACsC,WAAN,CAAmBC,KAAD,IAAW;AAC9CN,IAAAA,UAAU,CAAEO,OAAD,IAAa,CACtB,GAAGA,OADmB,EAEtB;AACErB,MAAAA,GAAG,EAAEoB,KAAK,CAACE,MAAN,CAAatB,GAAb,EADP;AAEEC,MAAAA,GAAG,EAAEmB,KAAK,CAACE,MAAN,CAAarB,GAAb,EAFP;AAGEsB,MAAAA,IAAI,EAAE,IAAIC,IAAJ;AAHR,KAFsB,CAAd,CAAV;AAQD,GATkB,EAShB,EATgB,CAAnB;AAWA,QAAMC,MAAM,GAAG5C,KAAK,CAAC6C,MAAN,EAAf;AACA,QAAMC,SAAS,GAAG9C,KAAK,CAACsC,WAAN,CAAmBS,GAAD,IAAS;AAC3CH,IAAAA,MAAM,CAACJ,OAAP,GAAiBO,GAAjB;AACD,GAFiB,EAEf,EAFe,CAAlB;AAGA,QAAMC,KAAK,GAAGhD,KAAK,CAACsC,WAAN,CAAkB,CAAC;AAAEnB,IAAAA,GAAF;AAAOC,IAAAA;AAAP,GAAD,KAAkB;AAChDwB,IAAAA,MAAM,CAACJ,OAAP,CAAeQ,KAAf,CAAqB;AAAE7B,MAAAA,GAAF;AAAOC,MAAAA;AAAP,KAArB;AACAwB,IAAAA,MAAM,CAACJ,OAAP,CAAeS,OAAf,CAAuB,EAAvB;AACD,GAHa,EAGX,EAHW,CAAd;AAIA,MAAItB,SAAJ,EAAe,OAAO,oBAAP;AACf,MAAI,CAACD,QAAL,EAAe,OAAO,cAAP;AAEf,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAEsB,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAEA,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE,oBAAC,SAAD;AACE,IAAA,iBAAiB,EAAEjC,iBADrB;AAEE,IAAA,IAAI,EAAE,EAFR;AAGE,IAAA,MAAM,EAAEG,MAHV;AAIE,IAAA,OAAO,EAAEG,OAJX;AAKE,IAAA,OAAO,EAAEgB,UALX;AAME,IAAA,MAAM,EAAES,SANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQGd,OAAO,CAACe,GAAR,CAAaG,MAAD,iBACX,oBAAC,MAAD;AACE,IAAA,GAAG,EAAEA,MAAM,CAACR,IAAP,CAAYS,WAAZ,EADP;AAEE,IAAA,QAAQ,EAAE;AAAEhC,MAAAA,GAAG,EAAE+B,MAAM,CAAC/B,GAAd;AAAmBC,MAAAA,GAAG,EAAE8B,MAAM,CAAC9B;AAA/B,KAFZ;AAGE,IAAA,OAAO,EAAE,MAAM;AACbgB,MAAAA,WAAW,CAACc,MAAD,CAAX;AACD,KALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CARH,EAkBGf,QAAQ,gBACP,oBAAC,UAAD;AACE,IAAA,QAAQ,EAAE;AAAEhB,MAAAA,GAAG,EAAEgB,QAAQ,CAAChB,GAAhB;AAAqBC,MAAAA,GAAG,EAAEe,QAAQ,CAACf;AAAnC,KADZ;AAEE,IAAA,YAAY,EAAE,MAAM;AAClBgB,MAAAA,WAAW,CAAC,IAAD,CAAX;AACD,KAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAYvB,cAAc,CAACsB,QAAQ,CAACO,IAAV,EAAgB,IAAIC,IAAJ,EAAhB,CAA1B,CAFF,CANF,CADO,GAYL,IA9BN,CAHF,CADF;AAsCD;;AACDS,4BAA4B,GAAG,MAAM;AACnC,QAAMC,QAAQ,GAAG,OAAjB,CADmC,CACT;;AAC1B,QAAMC,SAAS,GAAG,OAAlB;AACA,MAAIC,SAAS,GAAG,IAAI,IAApB,CAHmC,CAGT;;AAE1B,QAAMC,GAAG,GACP,2EACAH,QADA,GAEA,GAFA,GAGAC,SAHA,GAIA,UAJA,GAKAC,SALA,GAMA,OANA,GAOAE,YARF;AAUAC,EAAAA,KAAK,CAACF,GAAD,CAAL,CACGG,IADH,CACSC,GAAD,IAAS;AACb,WAAOA,GAAG,CAACC,IAAJ,EAAP;AACD,GAHH,EAIGF,IAJH,CAISC,GAAD,IAAS;AACb,QAAIE,MAAM,GAAG,EAAb,CADa,CACI;;AACjB,SAAK,IAAIC,WAAT,IAAwBH,GAAG,CAACI,OAA5B,EAAqC;AACnC,UAAIC,KAAK,GAAG,EAAZ;AACA,UAAI9C,GAAG,GAAG4C,WAAW,CAACG,QAAZ,CAAqBC,QAArB,CAA8BhD,GAAxC;AACA,UAAIC,GAAG,GAAG2C,WAAW,CAACG,QAAZ,CAAqBC,QAArB,CAA8B/C,GAAxC;AACA,UAAIgD,UAAU,GAAG;AACff,QAAAA,QAAQ,EAAElC,GADK;AAEfmC,QAAAA,SAAS,EAAElC;AAFI,OAAjB;AAKA,UAAIiD,OAAO,GAAG,EAAd;;AAEA,UAAIN,WAAW,CAACO,MAAhB,EAAwB;AACtB,aAAK,IAAIC,KAAT,IAAkBR,WAAW,CAACO,MAA9B,EAAsC;AACpC,cAAIE,QAAQ,GAAGC,IAAI,CAACC,gBAAL,GAAwBH,KAAK,CAACI,eAA7C;AACAN,UAAAA,OAAO,CAACO,IAAR,CAAaJ,QAAb;AACD;AACF;;AAEDP,MAAAA,KAAK,CAAC,YAAD,CAAL,GAAsBF,WAAW,CAACc,KAAlC;AACAZ,MAAAA,KAAK,CAAC,YAAD,CAAL,GAAsBG,UAAtB;AACAH,MAAAA,KAAK,CAAC,SAAD,CAAL,GAAmBF,WAAW,CAACe,QAA/B;AACAb,MAAAA,KAAK,CAAC,WAAD,CAAL,GAAqBF,WAAW,CAACgB,IAAjC;AACAd,MAAAA,KAAK,CAAC,SAAD,CAAL,GAAmBI,OAAnB;AAEAP,MAAAA,MAAM,CAACc,IAAP,CAAYX,KAAZ;AACD,KA3BY,CA6Bb;;AACD,GAlCH,EAmCGe,KAnCH,CAmCUC,KAAD,IAAW;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,GArCH;AAsCD,CArDD;;AAuDA,SAASG,MAAT,CAAgB;AAAEpC,EAAAA;AAAF,CAAhB,EAA2B;AACzB,sBACE;AACE,IAAA,SAAS,EAAC,QADZ;AAEE,IAAA,OAAO,EAAE,MAAM;AACbqC,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CACGC,QAAD,IAAc;AACZxC,QAAAA,KAAK,CAAC;AACJ7B,UAAAA,GAAG,EAAEqE,QAAQ,CAACC,MAAT,CAAgBpC,QADjB;AAEJjC,UAAAA,GAAG,EAAEoE,QAAQ,CAACC,MAAT,CAAgBnC;AAFjB,SAAD,CAAL;AAID,OANH,EAOE,MAAM,IAPR,EAQEjC,OARF;AAUD,KAbH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAeE;AAAK,IAAA,GAAG,EAAC,aAAT;AAAuB,IAAA,GAAG,EAAC,qBAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfF,CADF;AAmBD;;AAED,SAASqE,MAAT,CAAgB;AAAE1C,EAAAA;AAAF,CAAhB,EAA2B;AACzB,QAAM;AACJ2C,IAAAA,KADI;AAEJC,IAAAA,KAFI;AAGJC,IAAAA,WAAW,EAAE;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAHT;AAIJC,IAAAA,QAJI;AAKJC,IAAAA;AALI,MAMF5F,qBAAqB,CAAC;AACxB6F,IAAAA,cAAc,EAAE;AACd/B,MAAAA,QAAQ,EAAE;AAAEhD,QAAAA,GAAG,EAAE,MAAM,OAAb;AAAsBC,QAAAA,GAAG,EAAE,MAAM,CAAC;AAAlC,OADI;AAEd+E,MAAAA,MAAM,EAAE,IAAI;AAFE;AADQ,GAAD,CANzB;AAaA,sBACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AACE,IAAA,QAAQ,EAAE,MAAOC,OAAP,IAAmB;AAC3BJ,MAAAA,QAAQ,CAACI,OAAD,EAAU,KAAV,CAAR;AACAH,MAAAA,gBAAgB;;AAChB,UAAI;AACF,cAAMjC,OAAO,GAAG,MAAM1D,UAAU,CAAC;AAAE8F,UAAAA;AAAF,SAAD,CAAhC;AACA,cAAM;AAAEjF,UAAAA,GAAF;AAAOC,UAAAA;AAAP,YAAe,MAAMb,SAAS,CAACyD,OAAO,CAAC,CAAD,CAAR,CAApC;AACAhB,QAAAA,KAAK,CAAC;AAAE7B,UAAAA,GAAF;AAAOC,UAAAA;AAAP,SAAD,CAAL;AACD,OAJD,CAIE,OAAO6D,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACD;AACF,KAXH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAaE,oBAAC,aAAD;AACE,IAAA,KAAK,EAAES,KADT;AAEE,IAAA,QAAQ,EAAGS,CAAD,IAAO;AACfL,MAAAA,QAAQ,CAACK,CAAC,CAACC,MAAF,CAASV,KAAV,CAAR;AACD,KAJH;AAKE,IAAA,OAAO,EAAE,CAACD,KALZ;AAME,IAAA,WAAW,EAAC,8BANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbF,eAqBE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGG,MAAM,KAAK,IAAX,IACCC,IAAI,CAAChD,GAAL,CAAS,CAAC;AAAEwD,IAAAA,EAAF;AAAMC,IAAAA;AAAN,GAAD,kBACP,oBAAC,cAAD;AAAgB,IAAA,GAAG,EAAED,EAArB;AAAyB,IAAA,KAAK,EAAEC,WAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFJ,CADF,CArBF,CADF,CADF;AAkCD","sourcesContent":["import React from \"react\";\nimport {\n  GoogleMap,\n  useLoadScript,\n  Marker,\n  InfoWindow,\n} from \"@react-google-maps/api\";\nimport usePlacesAutocomplete, {\n  getGeocode,\n  getLatLng,\n} from \"use-places-autocomplete\";\nimport {\n  Combobox,\n  ComboboxInput,\n  ComboboxPopover,\n  ComboboxList,\n  ComboboxOption,\n} from \"@reach/combobox\";\nimport { formatRelative } from \"date-fns\";\n\nimport \"@reach/combobox/styles.css\";\n\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  width: \"100vw\",\n  height: \"50vh\",\n};\nconst center = {\n  lat: 52.408054,\n  lng: -1.510556,\n};\nconst options = {\n  mapTypeControl: false,\n  fullscreenControl: false,\n  streetViewControl: false,\n};\n\nexport default function App() {\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n    libraries,\n  });\n\n  const [markers, setMarkers] = React.useState([]);\n  const [selected, setSelected] = React.useState(null);\n  const onMapClick = React.useCallback((event) => {\n    setMarkers((current) => [\n      ...current,\n      {\n        lat: event.latLng.lat(),\n        lng: event.latLng.lng(),\n        time: new Date(),\n      },\n    ]);\n  }, []);\n\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback((map) => {\n    mapRef.current = map;\n  }, []);\n  const panTo = React.useCallback(({ lat, lng }) => {\n    mapRef.current.panTo({ lat, lng });\n    mapRef.current.setZoom(16);\n  }, []);\n  if (loadError) return \"Error loading maps\";\n  if (!isLoaded) return \"Loading Maps\";\n\n  return (\n    <div className=\"centered\">\n      <Search panTo={panTo} />\n      <Locate panTo={panTo} />\n      <GoogleMap\n        mapContainerStyle={mapContainerStyle}\n        zoom={15}\n        center={center}\n        options={options}\n        onClick={onMapClick}\n        onLoad={onMapLoad}\n      >\n        {markers.map((marker) => (\n          <Marker\n            key={marker.time.toISOString()}\n            position={{ lat: marker.lat, lng: marker.lng }}\n            onClick={() => {\n              setSelected(marker);\n            }}\n          />\n        ))}\n\n        {selected ? (\n          <InfoWindow\n            position={{ lat: selected.lat, lng: selected.lng }}\n            onCloseClick={() => {\n              setSelected(null);\n            }}\n          >\n            <div>\n              <h1>Hello</h1>\n              <p>Clicked {formatRelative(selected.time, new Date())}</p>\n            </div>\n          </InfoWindow>\n        ) : null}\n      </GoogleMap>\n    </div>\n  );\n}\nfetchNearestPlacesFromGoogle = () => {\n  const latitude = 25.0756; // you can update it with user's latitude & Longitude\n  const longitude = 55.1454;\n  let radMetter = 2 * 1000; // Search withing 2 KM radius\n\n  const url =\n    \"https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=\" +\n    latitude +\n    \",\" +\n    longitude +\n    \"&radius=\" +\n    radMetter +\n    \"&key=\" +\n    YOUR_API_KEY;\n\n  fetch(url)\n    .then((res) => {\n      return res.json();\n    })\n    .then((res) => {\n      var places = []; // This Array WIll contain locations received from google\n      for (let googlePlace of res.results) {\n        var place = {};\n        var lat = googlePlace.geometry.location.lat;\n        var lng = googlePlace.geometry.location.lng;\n        var coordinate = {\n          latitude: lat,\n          longitude: lng,\n        };\n\n        var gallery = [];\n\n        if (googlePlace.photos) {\n          for (let photo of googlePlace.photos) {\n            var photoUrl = Urls.GooglePicBaseUrl + photo.photo_reference;\n            gallery.push(photoUrl);\n          }\n        }\n\n        place[\"placeTypes\"] = googlePlace.types;\n        place[\"coordinate\"] = coordinate;\n        place[\"placeId\"] = googlePlace.place_id;\n        place[\"placeName\"] = googlePlace.name;\n        place[\"gallery\"] = gallery;\n\n        places.push(place);\n      }\n\n      // Do your work here with places Array\n    })\n    .catch((error) => {\n      console.log(error);\n    });\n};\n\nfunction Locate({ panTo }) {\n  return (\n    <button\n      className=\"locate\"\n      onClick={() => {\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            panTo({\n              lat: position.coords.latitude,\n              lng: position.coords.longitude,\n            });\n          },\n          () => null,\n          options\n        );\n      }}\n    >\n      <img src=\"compass.svg\" alt=\"compass - locate me\" />\n    </button>\n  );\n}\n\nfunction Search({ panTo }) {\n  const {\n    ready,\n    value,\n    suggestions: { status, data },\n    setValue,\n    clearSuggestions,\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: { lat: () => 43.6532, lng: () => -79.3832 },\n      radius: 1 * 1000,\n    },\n  });\n\n  return (\n    <div className=\"search\">\n      <Combobox\n        onSelect={async (address) => {\n          setValue(address, false);\n          clearSuggestions();\n          try {\n            const results = await getGeocode({ address });\n            const { lat, lng } = await getLatLng(results[0]);\n            panTo({ lat, lng });\n          } catch (error) {\n            console.log(\"error!\");\n          }\n        }}\n      >\n        <ComboboxInput\n          value={value}\n          onChange={(e) => {\n            setValue(e.target.value);\n          }}\n          disable={!ready}\n          placeholder=\"Enter your Point of Interest\"\n        />\n        <ComboboxPopover>\n          <ComboboxList>\n            {status === \"OK\" &&\n              data.map(({ id, description }) => (\n                <ComboboxOption key={id} value={description} />\n              ))}\n          </ComboboxList>\n        </ComboboxPopover>\n      </Combobox>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}